{"version":3,"sources":["context/GifsContext.js","components/Gif.js","services/settingsAPI.js","components/Spinner.js","components/ListOfGifs.js","hooks/useNearScreen.js","services/getGifs.js","hooks/useGifs.js","components/Footer.js","components/ShowGifs.js","components/Detail.js","hooks/useGlobalGifs.js","App.js","reportWebVitals.js","index.js"],"names":["GifsContext","createContext","GifsContextProvider","children","useState","gifs","setGifs","Provider","value","Gif","title","url","id","height","width","className","to","loading","src","alt","memo","prevProps","nextProps","API_key","API_url","Spinner","class","ListOfGifs","map","restOfGif","extraInfo","useNearScreen","distance","externalRef","once","isNearScreen","setShow","fromRef","useRef","useEffect","observer","element","current","onChange","entries","isIntersecting","disconnect","Promise","resolve","IntersectionObserver","then","rootMargin","observe","getGifs","a","limit","keyword","page","fetch","res","json","resJson","data","x","images","fixed_width","useGifs","setLoading","loadingNextPage","setLoadingNextPage","setPage","useContext","keywordToUse","localStorage","getItem","setItem","nextGifs","prevGifs","concat","Footer","ShowGifs","params","debounceHandleNextPage","useCallback","debounce","prevPage","decodeURI","ref","Detail","gif","find","singlegif","HomePage","lazy","App","fallback","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6313567b.chunk.js","sourcesContent":["import { createContext, useState } from \"react\"\r\n\r\nconst GifsContext = createContext({})\r\n//Crear un \"Povider\" propio --> El 'children es lo que cubre el provider\r\nexport const GifsContextProvider = ({children}) => {\r\n  const [gifs, setGifs] = useState([])\r\n\r\n  return <GifsContext.Provider value={{gifs, setGifs}}>\r\n    {children}\r\n  </GifsContext.Provider>\r\n}\r\n\r\nexport default GifsContext","import { memo } from 'react'\r\nimport { Link } from 'wouter'\r\nimport 'css/Gif.css'\r\n\r\nconst Gif = ({ title, url, id, height, width }) => {\r\n  // console.log( height, width )\r\n  // let styles = {\r\n  //   height: `${height}px`,\r\n  //   width: `${width}px`\r\n  // }\r\n  return (\r\n    <div className=\"gifs borderR\">\r\n      <Link to={`/gif/${id}`} className=\"gifLink\">\r\n        <span className=\"gifSpan\">{title}</span>\r\n        <img\r\n          loading='lazy'\r\n          className=\"borderR imgGif\" \r\n          src={url} \r\n          alt={title}\r\n        />\r\n      </Link>\r\n    </div >\r\n  )\r\n}\r\n\r\n//Se aclara cuales son las props que realmente usa, para evitar 'malos renders'\r\nexport default memo(Gif, (prevProps, nextProps) => {\r\n  //Si es 'true' el elemento(Gif) se memoriza\r\n  return prevProps.id === nextProps.id\r\n})","export const API_key = 'n3868xAgrFoCksxL70Ci8cf8w7VLDTQz'\r\n\r\nexport const API_url = 'https://api.giphy.com/v1'\r\n","import 'css/Spinner.css'\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div class=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n  )\r\n}\r\n\r\nexport default Spinner","import Gif from \"./Gif\"\r\nimport 'css/ListOfGifs.css'\r\n\r\nconst ListOfGifs = ({ gifs }) => {\r\n  return <div className=\"listOfGifs\">\r\n    {\r\n      gifs.map(({ id, title, url, ...restOfGif }) =>\r\n        <Gif \r\n          key={id}\r\n          title={title}\r\n          url={url}\r\n          id={id}\r\n          extraInfo={restOfGif}\r\n        />\r\n      )\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default ListOfGifs","import { useEffect, useState, useRef } from 'react'\r\n\r\nconst useNearScreen = ({ distance = '80px', externalRef, once = true } = {}) => {\r\n  const [isNearScreen, setShow] = useState(false)\r\n  const fromRef = useRef()\r\n\r\n  useEffect( () => {\r\n    let observer\r\n\r\n    const element = externalRef ? externalRef.current : fromRef.current\r\n\r\n    const onChange = (entries, observer) => {\r\n      const element = entries[0]\r\n      if (element.isIntersecting) {\r\n        setShow(true)\r\n        once && observer.disconnect()\r\n      } else {\r\n        !once && setShow(false)\r\n      }\r\n    }\r\n\r\n    // (() => {\r\n    //   typeof IntersectionObserver !== 'undefined'\r\n    //     ? IntersectionObserver\r\n    //     : import('intersection-observer')\r\n\r\n    //   observer = new IntersectionObserver(onChange, {\r\n    //     rootMargin: distance\r\n    //   })\r\n  \r\n    //   element && observer.observe(element)\r\n    // })()\r\n\r\n    Promise.resolve(\r\n      typeof IntersectionObserver !== 'undefined'\r\n        ? IntersectionObserver\r\n        : import('intersection-observer')\r\n    ).then(() => {\r\n      observer = new IntersectionObserver(onChange, {\r\n        rootMargin: distance\r\n      })\r\n\r\n      element && observer.observe(element)\r\n    })\r\n\r\n    return () => observer && observer.disconnect()\r\n  })\r\n\r\n  return {isNearScreen, fromRef}\r\n}\r\n\r\nexport default useNearScreen","import {API_key, API_url} from './settingsAPI'\r\n\r\nexport const getGifs = async ({ limit = 10, keyword = 'panda', page = 0 } = {}) => {\r\n  const url = `${API_url}/gifs/search?api_key=${API_key}&q=${keyword}&limit=${limit}&offset=${page * limit}&rating=g&lang=es`\r\n  const res = await fetch( url )\r\n  const resJson = await res.json()\r\n  const { data } = resJson\r\n  const gifs = data.map( x => {\r\n    const { id, title, images } = x\r\n    const { url, height, width } = images.fixed_width\r\n    return { id, title, url, height, width }\r\n  })\r\n  return gifs\r\n}\r\n","import { useContext, useEffect, useState } from 'react'\r\nimport { getGifs } from 'services/getGifs'\r\nimport GifsContext from 'context/GifsContext'\r\n\r\nconst INITIAL_PAGE = 0\r\n\r\nexport const useGifs = ({ keyword } = { keyword: null }) => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingNextPage, setLoadingNextPage] = useState(false)\r\n\r\n  const [page, setPage] = useState(INITIAL_PAGE)\r\n  const {gifs, setGifs} = useContext(GifsContext)\r\n\r\n  //Recupera la última búsqueda\r\n  const keywordToUse = keyword || localStorage.getItem('lastKeyword') || 'random'\r\n\r\n  useEffect(async () => {\r\n    setLoading(true)\r\n\r\n    const res = await getGifs({keyword: keywordToUse}) \r\n    setGifs(res)\r\n    setLoading(false)\r\n    localStorage.setItem('lastKeyword', keyword)\r\n  }, [keyword, keywordToUse, setGifs])\r\n\r\n  useEffect(async () => {\r\n    if (page === INITIAL_PAGE) return\r\n\r\n    setLoadingNextPage(true)\r\n    const nextGifs = await getGifs({ keyword: keywordToUse, page})\r\n    setGifs( prevGifs => prevGifs.concat(nextGifs))\r\n    setLoadingNextPage(false)\r\n  }, [keywordToUse, page])\r\n\r\n  return { loading, loadingNextPage, gifs, setPage }\r\n}","import 'css/Footer.css'\r\n\r\nexport const Footer = () => {\r\n   return (\r\n       <div className=\"footer\">\r\n           <span>Codear <sub>Inc.</sub> &copy;</span>\r\n       </div>\r\n   )\r\n}","import { useCallback, useRef, useEffect } from \"react\"\r\nimport { useGifs } from \"hooks/useGifs\"\r\nimport Spinner from './Spinner'\r\nimport ListOfGifs from \"./ListOfGifs\"\r\nimport useNearScreen from \"hooks/useNearScreen\"\r\nimport debounce from \"just-debounce-it\"\r\n\r\nconst ShowGifs = ({ params }) => {\r\n  const { keyword } = params\r\n  const { loading, gifs, setPage } = useGifs({ keyword })\r\n  const externalRef = useRef()\r\n  const { isNearScreen } = useNearScreen({\r\n    externalRef: loading ? null : externalRef,\r\n    once: false\r\n  })\r\n  \r\n  const debounceHandleNextPage = useCallback(debounce(\r\n    () => setPage( prevPage => prevPage + 1 ), 200\r\n  ), [setPage])\r\n\r\n  useEffect( () => {\r\n    if (isNearScreen) debounceHandleNextPage()\r\n  }, [isNearScreen, debounceHandleNextPage] )\r\n\r\n  return <>\r\n    { loading \r\n      ? <Spinner />\r\n      : <>\r\n        <h3 className=\"titlePopularGifs\">{decodeURI(keyword)}</h3>\r\n        <ListOfGifs gifs={gifs} />\r\n        <div id=\"visor\" ref={externalRef}></div>\r\n      </>\r\n    }\r\n  </>\r\n}\r\n\r\nexport default ShowGifs","import { useGlobalGifs } from \"hooks/useGlobalGifs\"\r\nimport Gif from \"./Gif\"\r\n\r\nconst Detail = ({ params }) => {\r\n  const {id} = params\r\n  const gifs = useGlobalGifs()\r\n  const gif = gifs.find( singlegif => singlegif.id === id )\r\n\r\n  return <>\r\n    <h3>Name: {gif.title}</h3>\r\n    <Gif {...gif} />\r\n  </>\r\n}\r\n\r\nexport default Detail","import { useContext } from \"react\"\r\nimport GifsContext from \"context/GifsContext\"\r\n\r\nexport const useGlobalGifs = () => {\r\n  const {gifs} = useContext(GifsContext)\r\n  return gifs\r\n}","import {  lazy, Suspense } from 'react'\r\n//import Home from './components/Home'\r\nimport { Footer } from './components/Footer'\r\nimport ShowGifs from './components/ShowGifs'\r\nimport Detail from './components/Detail'\r\nimport { Link, Route } from 'wouter'\r\nimport { GifsContextProvider } from './context/GifsContext'\r\nimport './css/App.css'\r\n\r\nconst HomePage = lazy(() => import('./components/Home'))\r\n\r\nexport const App = () => {\r\n  return <>\r\n    <Suspense fallback={null}>\r\n      <div className=\"App\">\r\n      <h1><Link to=\"/\" className=\"titleApp\">Giffs</Link></h1>\r\n      <GifsContextProvider>\r\n        <Route\r\n          path=\"/\"\r\n          component={ HomePage }\r\n        />\r\n        <Route\r\n          path=\"/search/:keyword\"\r\n          component={ ShowGifs }\r\n        />\r\n        <Route\r\n          path=\"/gif/:id\"\r\n          component={ Detail }\r\n        />\r\n      </GifsContextProvider>\r\n      </div>\r\n      <Footer />\r\n    </Suspense>\r\n  </>\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}